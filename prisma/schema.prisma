// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                    String  @id @default(cuid())
    userId                String
    type                  String
    provider              String
    providerAccountId     String
    refreshToken          String? @map("refresh_token")
    accessToken           String? @map("access_token")
    expiresAt             Int?    @map("expires_at")
    tokenType             String? @map("token_type")
    scope                 String?
    idToken               String? @map("id_token")
    sessionState          String? @map("session_state")
    user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refreshTokenExpiresIn Int?    @map("refresh_token_expires_in")

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime?

    accounts          Account[]
    sessions          Session[]
    documentsComments DocumentComments[]
    organizationUsers OrganizationUsers[]
    userDocuments     UserDocuments[]
}

model Organization {
    id          String  @id @default(cuid())
    name        String
    description String?
    image       String?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    organizationUsers OrganizationUsers[]
    userDocuments     UserDocuments[]
}

enum OrganizationUserRole {
    OWNER
    ADMIN
    MEMBER
}

model OrganizationUsers {
    id             String @id @default(cuid())
    userId         String
    organizationId String

    user         User         @relation(fields: [userId], references: [id])
    organization Organization @relation(fields: [organizationId], references: [id])
}

model Document {
    id          String  @id @default(cuid())
    name        String
    description String?
    url         String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    categories        Category[]
    documentsComments DocumentComments[]
    userDocuments     UserDocuments[]
}

enum DocumentUserRole {
    OWNER
    READER
    EDITOR
}

model UserDocuments {
    id             String @id @default(cuid())
    authorId       String
    organizationId String
    documentId     String

    author       User         @relation(fields: [authorId], references: [id])
    organization Organization @relation(fields: [organizationId], references: [id])
    document     Document     @relation(fields: [documentId], references: [id])
}

model Category {
    id    String @id @default(cuid())
    name  String
    color String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    documents Document[]
}

model Comment {
    id      String @id @default(cuid())
    content String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    documentsComments DocumentComments[]
}

model DocumentComments {
    id         String @id @default(cuid())
    documentId String
    commentId  String
    authorId   String

    document Document @relation(fields: [documentId], references: [id])
    comment  Comment  @relation(fields: [commentId], references: [id])
    author   User     @relation(fields: [authorId], references: [id])
}
